# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import cochlear_sense_pb2 as cochlear__sense__pb2


class cochlear_senseStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.event = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/event',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.age_gender = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/age_gender',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_key = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/music_key',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_tempo = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/music_tempo',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_genre = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/music_genre',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_mood = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/music_mood',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_detector = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/music_detector',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.speech_detector = channel.stream_unary(
        '/cochlear.ai.cochlear_sense/speech_detector',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.event_stream = channel.stream_stream(
        '/cochlear.ai.cochlear_sense/event_stream',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.age_gender_stream = channel.stream_stream(
        '/cochlear.ai.cochlear_sense/age_gender_stream',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_genre_stream = channel.stream_stream(
        '/cochlear.ai.cochlear_sense/music_genre_stream',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_mood_stream = channel.stream_stream(
        '/cochlear.ai.cochlear_sense/music_mood_stream',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.music_detector_stream = channel.stream_stream(
        '/cochlear.ai.cochlear_sense/music_detector_stream',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )
    self.speech_detector_stream = channel.stream_stream(
        '/cochlear.ai.cochlear_sense/speech_detector_stream',
        request_serializer=cochlear__sense__pb2.input.SerializeToString,
        response_deserializer=cochlear__sense__pb2.output.FromString,
        )


class cochlear_senseServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def event(self, request_iterator, context):
    """Async functions (8 functions)

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def age_gender(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_key(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_tempo(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_genre(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_mood(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_detector(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def speech_detector(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def event_stream(self, request_iterator, context):
    """Streaming functions (6 functions)

    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def age_gender_stream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_genre_stream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_mood_stream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def music_detector_stream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def speech_detector_stream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_cochlear_senseServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'event': grpc.stream_unary_rpc_method_handler(
          servicer.event,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'age_gender': grpc.stream_unary_rpc_method_handler(
          servicer.age_gender,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_key': grpc.stream_unary_rpc_method_handler(
          servicer.music_key,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_tempo': grpc.stream_unary_rpc_method_handler(
          servicer.music_tempo,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_genre': grpc.stream_unary_rpc_method_handler(
          servicer.music_genre,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_mood': grpc.stream_unary_rpc_method_handler(
          servicer.music_mood,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_detector': grpc.stream_unary_rpc_method_handler(
          servicer.music_detector,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'speech_detector': grpc.stream_unary_rpc_method_handler(
          servicer.speech_detector,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'event_stream': grpc.stream_stream_rpc_method_handler(
          servicer.event_stream,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'age_gender_stream': grpc.stream_stream_rpc_method_handler(
          servicer.age_gender_stream,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_genre_stream': grpc.stream_stream_rpc_method_handler(
          servicer.music_genre_stream,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_mood_stream': grpc.stream_stream_rpc_method_handler(
          servicer.music_mood_stream,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'music_detector_stream': grpc.stream_stream_rpc_method_handler(
          servicer.music_detector_stream,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
      'speech_detector_stream': grpc.stream_stream_rpc_method_handler(
          servicer.speech_detector_stream,
          request_deserializer=cochlear__sense__pb2.input.FromString,
          response_serializer=cochlear__sense__pb2.output.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cochlear.ai.cochlear_sense', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
